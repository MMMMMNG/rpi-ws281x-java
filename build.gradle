plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'org.hidetake.ssh' version '2.11.2'
    id 'java'
    id 'maven-publish'
    id 'signing'
}
java {
    sourceCompatibility = JavaVersion.VERSION_17
}

remotes {
    rasPi {
        host = project.findProperty("RasPiHost")
        user = project.findProperty("RasPiUser")
        password = project.findProperty("RasPiPassword")
        fileTransfer = "scp"
        jschLog = true
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'com.github.mbelling'

sourceSets {
    main {
        java {
            // Get the generated source from SWIG
            srcDirs 'build/generatedSource/java'
        }
        resources {
            // Get the native .so file
            srcDirs 'build/nativeLib'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.apache.logging.log4j:log4j-api:2.10.0'
    runtimeOnly 'org.apache.logging.log4j:log4j-core:2.12.4'

    testImplementation 'junit:junit:4.13.1'
}

def remoteBuildDir = project.findProperty("RasPiRemoteBuildDir")
tasks.register('buildNativeOnPi') {
    description = 'build native lib on remote pi'
    doLast {
        ssh.run {
            session(remotes.rasPi) {
                println("[buildNativeOnPi] - Copy all files...")
                put from: './src/', into: remoteBuildDir

                //remove windows line breaks
                execute "cd $remoteBuildDir; tr -d '\\r' <src/scripts/createNativeLib.sh >src/scripts/createNativeLib.sh"
                execute "cd $remoteBuildDir; chmod +x src/scripts/createNativeLib.sh"
                //now build
                println("[buildNativeOnPi] - Execute build script...")
                execute "cd $remoteBuildDir; touch logs.txt; bash src/scripts/createNativeLib.sh > logs.txt 2>&1"

                println("[buildNativeOnPi] - Copy generated artifacts back")
                get from: "$remoteBuildDir/build", into: '.'

                println("[buildNativeOnPi] - All Done! Try ./gradlew assemble")
            }
        }

    }
}
tasks.register('finalizeBuildNative') {
    doLast {
        ssh.run {
            session(remotes.rasPi) {
                get from: "$remoteBuildDir/logs.txt", into: 'build/'
            }
            println("The captured log output from 'createNativeLib.sh'...")
            def logFile = project.file("build/logs.txt")

            if (logFile.exists()) {
                // Read and print the log file contents
                logFile.eachLine { line ->
                    println line
                }
            } else {
                println "Log file not found."
            }
        }

    }
}

tasks.buildNativeOnPi.finalizedBy('finalizeBuildNative')


tasks.register('checkSharedLibrary') {
    description = "Check if the shared library exists in the desired location"

    doLast {
        def libraryFile = file('/build/nativeLib/libws281x.so')

        if (!libraryFile.exists()) {
            throw new GradleException("Shared library is missing in the desired location.")
        }
    }
}

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
}

build.dependsOn checkSharedLibrary

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId project.group
            artifactId project.name
            version project.version
            from components.java
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
            artifact(sourceJar) {
                classifier 'sources'
            }
            artifact(javadocJar) {
                classifier 'javadoc'
            }
            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()
        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }
        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST
            description 'Java wrapper for rpi_ws281x library using SWIG'
            name 'rpi-ws281x-java'
            url 'https://github.com/rpi-ws281x/rpi-ws281x-java'
            organization {
                name 'rpi-ws281x'
                url 'https://github.com/rpi-ws281x/'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/rpi-ws281x/rpi-ws281x-java/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/rpi-ws281x/rpi-ws281x-java/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/rpi-ws281x/rpi-ws281x-java'
                connection 'scm:git:git://github.com/rpi-ws281x/rpi-ws281x-java.git'
                developerConnection 'scm:git:ssh://git@github.com:rpi-ws281x/rpi-ws281x-java.git'
            }
            developers {
                developer {
                    name "Matthew Bellinger"
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = layout.buildDirectory.file("generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}